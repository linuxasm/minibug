;--------------  m_memory.in --------------------------
  [section .text]

  extern hexascii2dword
  extern hexascii2word
  extern hexascii2byte
  extern hexascii_to_dword
  extern lookup_token
  extern trace_poke
  extern is_alpha

;------------------------------------------------------
mem_db:
  mov	[memwin_mode],byte 1
  ret	;	mpu_exit
;-------------------------------------------

mem_dw:
  mov	[memwin_mode],byte 2
  ret	;jmp	mpu_exit
;-------------------------------------------

mem_dd:
  mov	[memwin_mode],byte 4
  ret	;jmp	mpu_exit
;-------------------------------------------

mem_up:
  call	setup_adr		;sets eax=MemWinAdr
  movzx ebx,byte [memwin_mode]
  sub	eax,ebx
  mov	[MemWinAdr],eax
mu_exit: 
  ret
;-------------------------------------------

mem_pgup:
  call	setup_adr		;sets eax=MemWinAdr
  movzx	ebx,byte [memwin_mode]
  imul	ebx,10
  sub	eax,ebx
  mov	[MemWinAdr],eax
  ret
;-------------------------------------------

mem_down:
  call	setup_adr		;sets eax=MemWinAdr
  movzx	ebx,byte [memwin_mode]
  add	eax,ebx	
  mov	[MemWinAdr],eax
md_exit: 
  ret
;-------------------------------------------

mem_pgdn:
  call	setup_adr		;sets eax=MemWinAdr
;  mov	eax,[MemWinAdr]
  movzx	ebx,byte [memwin_mode]
  imul	ebx,10
  add	eax,ebx
  mov	[MemWinAdr],eax
  ret
;-------------------------------------------
setup_adr:
  mov	eax,[MemWinAdr]
  cmp	eax,byte 64		;check if  register
  ja	sa_exit			;jmp if not register
  add	eax,app_regs	;index into registers
  mov	eax,[eax]		;get register value
sa_exit:
  ret

;-------------------------------------------
mem_find:
  mov	eax,[dis_win_top]
  mov	[save_dis_win],eax
  call	find
  mov	eax,[dis_win_top]
  mov	[MemWinAdr],eax
  mov	eax,[save_dis_win]
  mov	[dis_win_top],eax
  ret
;----------
  [section .data]
save_dis_win	dd 0
  [section .text]  
;-------------------------------------------
mem_find_again:
  mov	eax,[dis_win_top]
  mov	[save_dis_win],eax
  call	find_next
  mov	eax,[dis_win_top]
  mov	[MemWinAdr],eax
  mov	eax,[save_dis_win]
  mov	[dis_win_top],eax
  ret
;-------------------------------------------
mem_address_entry:
  mov	eax,mem_blank_line	;get text for main menu
  call	show_menu_line

  mov	edx,[MemWinAdr]
  mov	esi,mem_buf
  call	trace_peek		;read dword of data
  mov	al,[memwin_mode]	;1=byte 2=word 4=dword
  cmp	al,2
  ja	mae_dword
  je	mae_word
mae_byte:
  mov	eax,[esi]	;get ptr to value
  mov	edi,string_buf
  call	byteto_hexascii  
  mov	eax,pre_mem_msg2
  mov	ebx,work_buf
  mov	cl,2		;window size
  call	edit_user_string
  mov	esi,work_buf
  call	hexascii_to_dword
  mov	[mem_buf],cl	;store hex value
  jmp	short mae_tail

mae_word:
  mov	eax,[esi]	;get ptr to value
  mov	edi,string_buf
  call	wordto_hexascii  
  mov	eax,pre_mem_msg2
  mov	ebx,work_buf
  mov	cl,4		;window size
  call	edit_user_string
  mov	esi,work_buf
  call	hexascii_to_dword
  mov	[mem_buf],cx	;store hex value
  jmp	short mae_tail
mae_dword:
  mov	eax,[esi]	;get ptr to value
  mov	edi,string_buf
  call	dwordto_hexascii  
  mov	eax,pre_mem_msg2
  mov	ebx,work_buf
  mov	cl,8		;window size
  call	edit_user_string
  mov	esi,work_buf
  call	hexascii_to_dword
  mov	[mem_buf],ecx	;store hex value

mae_tail:
  mov	edx,[MemWinAdr]
  mov	esi,[mem_buf]
  call	trace_poke		;read dword of data
  ret
;----------
  [section .data]
pre_mem_msg2: db ' edit ----> ',0
mem_blank_line: db ' ',0
  [section .text]
;------------------------------------------------------
show_mem_win:
  mov	eax,mem_header
  call	show_header_line

  mov	eax,[MemWinAdr]
  mov	[mem_adr],eax
  mov	edi,mem_adr_stuff
  call	dwordto_hexascii 
  mov	eax,mem_menu_txt	;get text for main menu
  call	show_menu_line

;display data for window

  mov	eax,[aux_win_color]
  call	crt_set_color


  mov	al,[mini_win_top_line2]
  mov	[mwin_row],al		;starting display row
  mov	[mwin_adr_ptr],dword mwin_adr_buf
  mov	[mwin_data_ptr],dword work_buf
;read data from app and display each line
sm_lp:
  mov	edx,[mem_adr]
  mov	esi,mem_buf
  call	trace_peek		;read dword of data
  pushf
  call	add_label_if		;add label if found
  mov	edi,lib_buf+100		;setup build buffer
;check if add_label_if moved us to end of window
  mov	eax,[mwin_row]
  cmp	al,[mini_win_end_line]
  jb	sm_38			;jmp if more display room
  popf
  jmp	short sm_exit
sm_38:
  popf
  jz	sm_40			;jmp if good read
;no data here, show message
  mov	esi,no_data_txt
  mov	ecx,no_data_txt_length
  rep	movsb
  jmp	short sm_60		;go display line
;display one line of data
sm_40:
  call	build_line		;build line in lib_buf+100
sm_60:
  call	display_edi
  call	update_array
;move to next data item
  movzx eax,byte [memwin_mode]
  add	[mem_adr],eax		;move to next address
  inc	dword [mwin_row]
  mov	eax,[mwin_row]
  cmp	al,[mini_win_end_line]
  jb	sm_lp			;loop till done

  cmp	[pop_help_flag],byte 0
  je	sm_exit			;exit if help not needed
  mov	ecx,mem_help
  call	show_mini_help
sm_exit:
  ret
;--------------
  [section .data]

mwin_row	db 0
mwin_adr_ptr	dd 0
mwin_data_ptr	dd 0
mwin_adr_buf	times 44 db 0


  [section .text]  
;-----------------------------
add_label_if:
  mov	edi,mem_adr	;move physical address to edi
  mov	ecx,4
  xor	edx,edx		;use hash
  call	hash_lookup
  or	eax,eax
  jnz	cl_50		;jmp if no label here
;esi points to symbol name
  mov	edi,lib_buf+100
  add	esi,byte 5
  call	str_move
  mov	ecx,25			;column
  call	display_edi
  call	update_array
  inc	dword [mwin_row]
cl_50:
  ret
;----------------------------
update_array:
;update map array
  mov	edi,[mwin_adr_ptr]
  mov	eax,[mem_adr]
  stosd
  mov	[mwin_adr_ptr],edi

  mov	edi,[mwin_data_ptr]
  mov	eax,[mem_buf]
  stosd
  mov	[mwin_data_ptr],edi
  ret
;-------------------------------
display_edi:
  push	edi
  mov	ah,[mwin_row]
  mov	al,1
  call	 move_cursor
  pop	edi
  mov	ebp,[crt_columns]
  add	ebp,lib_buf+100		;compute end of screen
de_pad:
  cmp	edi,ebp			;end of screen?
  jae	sm_70			;jmp if line built
  mov	al,' '
  stosb
  jmp	short de_pad
sm_70:
  mov	ecx,lib_buf+100		;start of text
  mov	edx,edi
  sub	edx,ecx			;compute length of write
  call	crt_write
  ret
;------------------------------------------------------------
build_line:
  mov	edi,lib_buf+100		;build area
  mov	al,' '
  stosb
  stosb
  mov	eax,[mem_adr]

  call	dwordto_hexascii	;insert address
  mov	al,' '
  stosb				;store space

  cmp	[memwin_mode],byte 2	;check if word
  jb	bl_byte
  je	bl_word
;must be dword
  mov	eax,' dd '
  stosd
  mov	eax,[mem_buf]		;get data
  call	dwordto_hexascii

  push	edi
  mov	edi,mem_buf	;move physical address to edi
  mov	ecx,4
  xor	edx,edx		;use hash
  call	hash_lookup
  pop	edi
  or	eax,eax
  jnz	bl_exit		;exit if no label

  mov	al,'('
  stosb
  add	esi,byte 5
  call	str_move
  mov	al,')'
  stosb
  jmp	short bl_exit
;process word data
bl_word:
  mov	eax,' dw '
  stosd
  mov	eax,[mem_buf]		;get data
  call	wordto_hexascii
  jmp	short bl_exit
;process byte
bl_byte:
  mov	eax,' db '
  stosd
  mov	eax,[mem_buf]		;get data
  push	eax
  call	byteto_hexascii
  mov	al,' '
  stosb
  stosb
  mov	al,22h
  stosb
  pop	eax
  call	is_alpha
  je	bl_byte1
  mov	al,'.'
bl_byte1:
  stosb
  mov	al,22h
  stosb
bl_exit:
  ret    
  
;-------------
  [section .data]
memwin_mode db 1
MemWinAdr   dd 0	;master, set by setup and arrow keys

no_data_txt:
 db 'address invalid'
no_data_txt_length equ $ - no_data_txt
  [section .text]

;------------------------------------------
mem_help:
 db '?-local help            '
 db 'w-next operational win  '
 db 'q-quit this window      '
 db 'edit (enter adr to edit '
 db '                        '
 db '                        '
 db 'alt-(win first letter)  '
 db '    select another win  '
 db '                        '
 db '                        '
 db '                        ',0


;-------------------------------------------

  [section .data]

mem_menu_txt: db ' win byte 2byts dword find quit edit_adr('
mem_adr_stuff: db '12345678)',0
mem_header:   db ' -- MEMORY --',0
mem_win_decode_tbl:
  db 0 ;pad
  db 2	;flag

  db '?',0
  dd enable_mini_help

  db 'w',0
  dd next_window

  db 'e',0
  dd mem_address_entry

  db 'q',0
  dd win_quit

  db 'b',0	;db
  dd mem_db

  db '2',0
  dd mem_dw

  db 'd',0
  dd mem_dd

  db 'f',0
  dd mem_find

  db 0ah,0
  dd mem_find_again

  db 0dh,0
  dd mem_find_again

  db 1bh,5bh,41h,0		;15 pad_up
  dd mem_up

  db 1bh,4fh,41h,0		;15 pad_up
  dd mem_up

  db 1bh,4fh,78h,0		;15 pad_up
  dd mem_up

  db 1bh,5bh,42h,0		;20 pad_down
  dd mem_down

  db 1bh,4fh,42h,0		;20 pad_down
  dd mem_down

  db 1bh,4fh,72h,0		;20 pad_down
  dd mem_down

  db 1bh,5bh,35h,7eh,0		;16 pad_pgup
  dd mem_pgup

  db 1bh,4fh,79h,0		;16 pad_pgup
  dd mem_pgup

  db 1bh,5bh,36h,7eh,0		;21 pad_pgdn
  dd mem_pgdn

  db 1bh,4fh,73h,0		;21 pad_pgdn
  dd mem_pgdn

  db 1bh,'r',0
  dd select_reg_win
  db 0c3h,0b2h,0
  dd select_reg_win

  db 1bh,'m',0
  dd select_mem_win
  db 0c3h,0adh,0
  dd select_mem_win

  db 1bh,'b',0
  dd select_break_win
  db 0c3h,0a2h,0
  dd select_break_win

  db 1bh,'s',0
  dd select_stack_win
  db 0c3h,0b3h,0
  dd select_stack_win

  db 1bh,'h',0
  dd select_help_win
  db 0c3h,0a8h,0
  dd select_help_win


  db 0 ;end of table

;------------
reg_list:
 db 'ebx',0	; ebx  4
 db 'ecx',0	; ecx  8
 db 'edx',0	; edx  12
 db 'esi',0	; esi  16
 db 'edi',0	; edi  20
 db 'ebp',0	; ebp  24
 db 'eax',0	; eax  28
 db 'ebx',0	;dummy ; r1_ds 32
 db 'ebx',0	;dummy; r1_es 36
 db 'ebx',0	;dummy; r1_fs 40
 db 'ebx',0	;dummy; r1_gs 44
 db 'ebx',0	;dummy; r1_old_eax 48
 db 'eip',0	; eip  52
 db 'ebx',0	;dummy; r1_cs 56
 db 'ebx',0	;dummy; r1_flags 60
 db 'esp',0	; esp  64
 db 0		;end of list

;----------------
  [section .text]

