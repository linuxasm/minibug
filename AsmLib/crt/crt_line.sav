 [section .text]
 extern lib_buf
 extern move_cursor
 extern crt_str
 extern mov_color

;****f* crt/crt_line *
; NAME
;>1 crt
;  crt_line - display line with embedded color codes
;     and fit line into window area
; INPUTS
;    ebx = ptr to color list, each color def is dword
;    ch = starting row 1+
;    cl = starting column 1+
;    dl = max line length, must be 1+
;    esi = ptr to data for line, each line end with 0ah, or 0
;      color codes start at 1 (first color in table)
;      color codes 1-9 are possible.
; OUTPUT
;    line is built in buffer lib_buf then displayed
;    esi - points at char beyond 0ah
; NOTES
;   source file: crt_line.asm
;<
; * ----------------------------------------------
;*******
  global crt_line
crt_line:
  mov	edi,lib_buf
cl_lp0:
  xor	eax,eax		;clear eax for color lookup
cl_lp1:
  lodsb
  cmp	al,0ah
  jbe	cl_code		;jmp if end of line or color
  stosb			;store data
  dec	dl
  or	dl,dl
  jnz	cl_lp1		;loop if not right edge of window
; adjust input data ptr to end of line
cl_lp2:
  lodsb
  or	al,al
  jz	cl_line		;jmp if end of line found
  cmp	al,0ah
  jne	cl_lp2
  jmp	short cl_line	;jmp if at right edge of window
cl_code:
  je	cl_eol		;jmp if eol character 0ah found
  or	al,al
  jz	cl_eol		;jmp if eol character
  dec	al
; look up color
  shl	eax,2
  add	eax,ebx		;compute ptr to color
  mov	eax,[eax]	;get color
  call	mov_color
  jmp	short cl_lp0	;continue
; end of line found, fill to right edge
cl_eol:
  mov	al,' '
  stosb
  dec	dl
  jnz	cl_eol
; line is built, now display
cl_line:  
  mov	byte [edi],0	;terminate line
; move cursor
  mov	eax,ecx		;get row and column
  call	move_cursor
; display line
  mov	ecx,lib_buf
  call	crt_str
  ret
