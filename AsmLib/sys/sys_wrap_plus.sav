
  extern crt_open,crt_close
  extern sys_win_alt,sys_win_normal
  extern reset_terminal
  extern mouse_enable
  extern sys_wrap

  [section .text]

struc wnsize_struc
.ws_row:resw 1
.ws_col:resw 1
.ws_xpixel:resw 1
.ws_ypixel:resw 1
endstruc
;wnsize_struc_size

struc termio_struc
.c_iflag: resd 1
.c_oflag: resd 1
.c_cflag: resd 1
.c_lflag: resd 1
.c_line: resb 1
.c_cc: resb 19
endstruc
;termio_struc_size:
    
;****f* sys/sys_wrap_plus *
; NAME
;   sys_wrap_plus - wrap around an executable and capture in/out
;   -        commands.  Also, restore terminal state.
; INPUTS
;  * eax = ptr to shell command string
;  * ebx = ptr to optional input (feed) process (see notes) 
;  * ecx = ptr to optional output capture process (see notes)
;  *  dl = flags, bit(0) 01h - if set sys_wrap will call shell
;  *  -           -             and assume eax is zero or shell
;  *  -           -             parameters.
;  *  -           bit (0) 00h - sys_wrap will assume eax is pointer
;  *  -           -             to command string with program to
;  *  -           -             execute.
;  *  -           bit (1) 02h - if set use alternate screen
;  *  -           bit (2) 04h - if set do crt_close then before
;  *  -                         returning do  crt_open
;  * env_stack function must be called prior to using this function
;  *       to find default shell.  If env_stack is not called
;  *       sys_wrap will try using /bin/sh as shell.
; OUTPUT
;  * al has status, 0 = success 
; NOTES
;  * file sys_wrap_plus.asm
;  * -
;  * The optional feed process can be set to zero if not needed.
;  * If a feed process address is given, it is called after data
;  * has been read.  The buffer address is in ecx and the number
;  * of bytes read is in edx.  The data has a zero at end.  The
;  * feed process can change the data and bye count.  If the byte
;  * count is set negative the wrapped child will be aborted.
;  * summary:  input:  ecx=buffer      output:  ecx=buffer
;  * -                 edx=byte count           edx=count or abort
;  * After returning the data will be an input to executing child.
;  * -
;  * The optional capture process is handled like the feed process,
;  * except the byte count (edx) can not be used to abort a process.
;  * After returning the data will be sent to stdout.
;  * -
;  * The input data buffer and output data buffer use lib_buf) which
;  * can have a maximum size of 599 bytes.
;  * ---------------------------------------------------
;*******
  extern termios    
  global sys_wrap_plus
sys_wrap_plus:
  push	eax
  push	ebx
  push	ecx
  mov	[swp_flag],dl		;save flags
  test	dl,4
  jz	swp_10			;jmp if crt_open not active
  cmp	dword [termios+termio_struc.c_lflag],0 ;double check user flag
  je	swp_10			;jmp if crt_close possible
  call	crt_close
swp_10:
  test	byte [swp_flag],2	;check if alt window wanted
  jz	swp_20			;jmp if no alt window
  call	sys_win_alt		;select alternate window
swp_20:
  pop	ecx
  pop	ebx
  pop	eax
;  * eax = ptr to program string
;  * -     this is normal shell command string
  mov	dl,[swp_flag]		;restore flags
  call	sys_wrap
  push	eax			;save copy return code
  test	byte [swp_flag],2
  jz	swp_40			;jmp if not alt window in use
  call	sys_win_normal
swp_40:
  call	reset_terminal
swp_50:
  test	byte [swp_flag],4	;check if crt was open
  jz	swp_60			;jmp if crt_open call inactive
  call	crt_open
swp_60:
  call	mouse_enable
  pop	eax			;restore copy return code
 ret
;---------------
  [section .data]
swp_flag:  db	0
  [section .data]

